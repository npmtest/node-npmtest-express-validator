{"/home/travis/build/npmtest/node-npmtest-express-validator/test.js":"/* istanbul instrument in package npmtest_express_validator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-validator/lib.npmtest_express_validator.js":"/* istanbul instrument in package npmtest_express_validator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_validator = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_validator = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-validator/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-validator && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_validator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_validator\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_validator.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_express_validator.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_validator.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_express_validator.__dirname +\n                    '/lib.npmtest_express_validator.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-validator/node_modules/express-validator/index.js":"module.exports = require('./lib/express_validator.js');\n","/home/travis/build/npmtest/node-npmtest-express-validator/node_modules/express-validator/lib/express_validator.js":"var validator = require('validator');\nvar _ = require('lodash');\nvar Promise = require('bluebird');\nvar utils = require('./utils');\n\n// When validator upgraded to v5, they removed automatic string coercion\n// The next few methods (up to validator.init()) restores that functionality\n// so that express-validator can continue to function normally\nvalidator.extend = function(name, fn) {\n  validator[name] = function() {\n    var args = Array.prototype.slice.call(arguments);\n    args[0] = validator.toString(args[0]);\n    return fn.apply(validator, args);\n  };\n};\n\nvalidator.init = function() {\n  for (var name in validator) {\n    if (typeof validator[name] !== 'function' || name === 'toString' ||\n      name === 'toDate' || name === 'extend' || name === 'init' ||\n      name === 'isServerSide') {\n      continue;\n    }\n    validator.extend(name, validator[name]);\n  }\n};\n\nvalidator.toString = function(input) {\n  if (typeof input === 'object' && input !== null && input.toString) {\n    input = input.toString();\n  } else if (input === null || typeof input === 'undefined' || (isNaN(input) && !input.length)) {\n    input = '';\n  }\n  return '' + input;\n};\n\nvalidator.toDate = function(date) {\n  if (Object.prototype.toString.call(date) === '[object Date]') {\n    return date;\n  }\n  date = Date.parse(date);\n  return !isNaN(date) ? new Date(date) : null;\n};\n\nvalidator.init();\n\n// validators and sanitizers not prefixed with is/to\nvar additionalValidators = ['contains', 'equals', 'matches'];\nvar additionalSanitizers = ['trim', 'ltrim', 'rtrim', 'escape', 'unescape', 'stripLow', 'whitelist', 'blacklist', 'normalizeEmail'];\n\n/**\n * Initializes a chain of validators\n *\n * @class\n * @param  {(string|string[])}  param         path to property to validate\n * @param  {string}             failMsg       validation failure message\n * @param  {Request}            req           request to attach validation errors\n * @param  {string}             location      request property to find value (body, params, query, etc.)\n * @param  {object}             options       options containing error formatter\n */\n\nfunction ValidatorChain(param, failMsg, req, location, options) {\n  this.errorFormatter = options.errorFormatter;\n  this.param = param;\n  this.value = location ? _.get(req[location], param) : undefined;\n  this.validationErrors = [];\n  this.failMsg = failMsg;\n  this.req = req;\n  this.lastError = null; // used by withMessage to get the values of the last error\n  return this;\n}\n\n\n/**\n * Initializes a sanitizer\n *\n * @class\n * @param  {(string|string[])}  param    path to property to sanitize\n * @param  {[type]}             req             request to sanitize\n * @param  {[string]}           locations        request property to find value\n */\n\nfunction Sanitizer(param, req, locations) {\n  this.values = locations.map(function(location) {\n    return _.get(req[location], param);\n  });\n\n  this.req = req;\n  this.param = param;\n  this.locations = locations;\n  return this;\n}\n\n/**\n * Adds validation methods to request object via express middleware\n *\n * @method expressValidator\n * @param  {object}         options\n * @return {function}       middleware\n */\n\nvar expressValidator = function(options) {\n  options = options || {};\n  var defaults = {\n    customValidators: {},\n    customSanitizers: {},\n    errorFormatter: function(param, msg, value) {\n      return {\n        param: param,\n        msg: msg,\n        value: value\n      };\n    }\n  };\n\n  _.defaults(options, defaults);\n\n  // _.set validators and sanitizers as prototype methods on corresponding chains\n  _.forEach(validator, function(method, methodName) {\n    if (methodName.match(/^is/) || _.includes(additionalValidators, methodName)) {\n      ValidatorChain.prototype[methodName] = makeValidator(methodName, validator);\n    }\n\n    if (methodName.match(/^to/) || _.includes(additionalSanitizers, methodName)) {\n      Sanitizer.prototype[methodName] = makeSanitizer(methodName, validator);\n    }\n  });\n\n  ValidatorChain.prototype.notEmpty = function() {\n    return this.isLength({\n      min: 1\n    });\n  };\n\n  ValidatorChain.prototype.len = function() {\n    return this.isLength.apply(this, arguments);\n  };\n\n  ValidatorChain.prototype.optional = function(opts) {\n    opts = opts || {};\n    // By default, optional checks if the key exists, but the user can pass in\n    // checkFalsy: true to skip validation if the property is falsy\n    var defaults = {\n      checkFalsy: false\n    };\n\n    var options = _.assign(defaults, opts);\n\n    if (options.checkFalsy) {\n      if (!this.value) {\n        this.skipValidating = true;\n      }\n    } else {\n      if (this.value === undefined) {\n        this.skipValidating = true;\n      }\n    }\n\n    return this;\n  };\n\n  ValidatorChain.prototype.withMessage = function(message) {\n    if (this.lastError) {\n      if (this.lastError.isAsync) {\n        this.req._asyncValidationErrors.pop().catch(function() {\n          // Suppress errors from original promise - they should go to the new one.\n          // Otherwise bluebird throws an 'unhandled rejection' error\n        });\n        var error = formatErrors.call(this.lastError.context, this.lastError.param, message, this.lastError.value);\n        var promise = this.lastError.promise.catch(function() {\n          return Promise.reject(error);\n        });\n        this.req._asyncValidationErrors.push(promise);\n      } else {\n        this.validationErrors.pop();\n        this.req._validationErrors.pop();\n        var errorMessage = formatErrors.call(this, this.lastError.param, message, this.lastError.value);\n        this.validationErrors.push(errorMessage);\n        this.req._validationErrors.push(errorMessage);\n        this.lastError = null;\n      }\n    }\n    return this;\n  };\n\n  _.forEach(options.customValidators, function(method, customValidatorName) {\n    ValidatorChain.prototype[customValidatorName] = makeValidator(customValidatorName, options.customValidators);\n  });\n\n  _.forEach(options.customSanitizers, function(method, customSanitizerName) {\n    Sanitizer.prototype[customSanitizerName] = makeSanitizer(customSanitizerName, options.customSanitizers);\n  });\n\n  return function(req, res, next) {\n    var locations = ['body', 'params', 'query'];\n\n    req._validationErrors = [];\n    req._asyncValidationErrors = [];\n    req.validationErrors = function(mapped, promisesResolved) {\n      if (!promisesResolved && req._asyncValidationErrors.length > 0) {\n        console.warn('WARNING: You have asynchronous validators but you have not used asyncValidateErrors to check for errors.');\n      }\n\n      if (mapped && req._validationErrors.length > 0) {\n        var errors = {};\n        req._validationErrors.forEach(function(err) {\n          errors[err.param] = err;\n        });\n\n        return errors;\n      }\n\n      return req._validationErrors.length > 0 ? req._validationErrors : false;\n    };\n\n    req.asyncValidationErrors = function(mapped) {\n      return new Promise(function(resolve, reject) {\n        var promises = req._asyncValidationErrors;\n        // Migrated using the recommended fix from\n        // http://bluebirdjs.com/docs/api/reflect.html\n        Promise.all(promises.map(function(promise) {\n          // Must convert to Bluebird promise in case they are using native\n          // Node promises since reflect() is not a native promise method\n          // http://bluebirdjs.com/docs/api/reflect.html#comment-2369616577\n          return Promise.resolve(promise).reflect();\n        })).then(function(results) {\n\n          results.forEach(function(result) {\n            if (result.isRejected()) {\n              req._validationErrors.push(result.reason());\n            }\n          });\n\n          if (req._validationErrors.length > 0) {\n            return reject(req.validationErrors(mapped, true));\n          }\n          resolve();\n        });\n      });\n    };\n\n    req.getValidationResult = function() {\n      return new Promise(function(resolve) {\n        var promises = req._asyncValidationErrors;\n        // Migrated using the recommended fix from\n        // http://bluebirdjs.com/docs/api/reflect.html\n        Promise.all(promises.map(function(promise) {\n          // Must convert to Bluebird promise in case they are using native\n          // Node promises since reflect() is not a native promise method\n          // http://bluebirdjs.com/docs/api/reflect.html#comment-2369616577\n          return Promise.resolve(promise).reflect();\n        })).then(function(results) {\n          results.forEach(function(result) {\n            if (result.isRejected()) {\n              req._validationErrors.push(result.reason());\n            }\n          });\n\n          return resolve(utils.decorateAsValidationResult({}, req._validationErrors));\n        });\n      });\n    };\n\n    locations.forEach(function(location) {\n        /**\n         * @name req.sanitizeQuery\n         * @see sanitize\n         * @param param\n         */\n        /**\n         * @name req.sanitizeParams\n         * @see sanitize\n         * @param param\n         */\n        /**\n         * @name req.sanitizeBody\n         * @see sanitize\n         * @param param\n         */\n      req['sanitize' + _.capitalize(location)] = function(param) {\n        return new Sanitizer(param, req, [location]);\n      };\n    });\n\n    req.sanitizeHeaders = function(param) {\n      if (param === 'referrer') {\n        param = 'referer';\n      }\n\n      return new Sanitizer(param.toLowerCase(), req, ['headers']);\n    };\n\n    req.sanitizeCookies = function(param) {\n      return new Sanitizer(param, req, ['cookies']);\n    };\n\n    req.sanitize = function(param) {\n      return new Sanitizer(param, req, locations);\n    };\n\n    locations.forEach(function(location) {\n      /**\n       * @name req.checkQuery\n       * @see check\n       * @param param\n       * @param [failMsg]\n       */\n      /**\n       * @name req.checkParams\n       * @see check\n       * @param param\n       * @param [failMsg]\n       */\n      /**\n       * @name req.checkBody\n       * @see check\n       * @param param\n       * @param [failMsg]\n       */\n      req['check' + _.capitalize(location)] = function(param, failMsg) {\n        if (_.isPlainObject(param)) {\n          return validateSchema(param, req, location, options);\n        }\n        return new ValidatorChain(param, failMsg, req, location, options);\n      };\n    });\n\n    req.checkHeaders = function(param, failMsg) {\n      if (_.isPlainObject(param)) {\n        return validateSchema(param, req, 'headers', options);\n      }\n\n      if (param === 'referrer') {\n        param = 'referer';\n      }\n\n      return new ValidatorChain(param.toLowerCase(), failMsg, req, 'headers', options);\n    };\n\n    req.checkCookies = function(param, failMsg) {\n      return new ValidatorChain(param, failMsg, req, 'cookies', options);\n    };\n\n    req.check = function(param, failMsg) {\n      if (_.isPlainObject(param)) {\n        return validateSchema(param, req, 'any', options);\n      }\n      return new ValidatorChain(param, failMsg, req, locate(req, param), options);\n    };\n\n    req.filter = req.sanitize;\n    req.assert = req.check;\n    req.validate = req.check;\n\n    next();\n  };\n};\n\n/**\n * validate an object using a schema, using following format:\n *\n * {\n *   paramName: {\n *     validatorName: true,\n *     validator2Name: true\n *   }\n * }\n *\n * Pass options or a custom error message:\n *\n * {\n *   paramName: {\n *     validatorName: {\n *       options: ['', ''],\n *       errorMessage: 'An Error Message'\n *     }\n *   }\n * }\n *\n * @method validateSchema\n * @param  {Object}       schema    schema of validations\n * @param  {Request}      req       request to attach validation errors\n * @param  {string}       loc  request property to find value (body, params, query, etc.)\n * @param  {Object}       options   options containing custom validators & errorFormatter\n * @return {object[]}               array of errors\n */\n\nfunction validateSchema(schema, req, loc, options) {\n  var locations = ['body', 'params', 'query', 'headers'],\n    currentLoc = loc;\n\n  for (var param in schema) {\n\n    // check if schema has defined location\n    if (schema[param].hasOwnProperty('in')) {\n      if (locations.indexOf(schema[param].in) !== -1) {\n        currentLoc = schema[param].in;\n      } else {\n        // skip params where defined location is not supported\n        continue;\n      }\n    } else {\n      currentLoc = loc === 'any' ? locate(req, param) : currentLoc;\n    }\n\n    var validator = new ValidatorChain(param, null, req, currentLoc, options);\n    var paramErrorMessage = schema[param].errorMessage;\n\n    var opts;\n\n    if (schema[param].optional) {\n      validator.optional.apply(validator, schema[param].optional.options);\n\n      if (validator.skipValidating) {\n        validator.failMsg = schema[param].optional.errorMessage || paramErrorMessage || 'Invalid param';\n        continue; // continue with the next param in schema\n      }\n    }\n\n    for (var methodName in schema[param]) {\n      if (methodName === 'in') {\n        /* Skip method if this is location definition, do not validate it.\n         * Restore also the original location that was changed only for this particular param.\n         * Without it everything after param with in field would be validated against wrong location.\n         */\n        currentLoc = loc;\n        continue;\n      }\n\n      if (methodName === 'errorMessage') {\n        /* Also do not validate if methodName\n         * represent parameter error message\n         */\n        continue;\n      }\n\n      validator.failMsg = schema[param][methodName].errorMessage || paramErrorMessage || 'Invalid param';\n\n      opts = schema[param][methodName].options;\n\n      if (opts != null && !Array.isArray(opts)) {\n        opts = [opts];\n      }\n\n      validator[methodName].apply(validator, opts);\n    }\n  }\n}\n\n/**\n * Validates and handles errors, return instance of itself to allow for chaining\n *\n * @method makeValidator\n * @param  {string}          methodName\n * @param  {object}          container\n * @return {function}\n */\n\nfunction makeValidator(methodName, container) {\n  return function() {\n    if (this.skipValidating) {\n      return this;\n    }\n\n    var args = [];\n    args.push(this.value);\n    args = args.concat(Array.prototype.slice.call(arguments));\n\n    var isValid = container[methodName].apply(container, args);\n\n    // Perform string replacement in the error message\n    var msg = this.failMsg;\n    if (typeof msg === 'string') {\n      args.forEach(function(arg, i) { msg = msg.replace('%' + i, arg); });\n    }\n    var error = formatErrors.call(this, this.param, msg || 'Invalid value', this.value);\n\n    if (isValid.then) {\n      var promise = isValid.catch(function() {\n        return Promise.reject(error);\n      });\n      this.lastError = {\n        promise: isValid,\n        param: this.param,\n        value: this.value,\n        context: this,\n        isAsync: true\n      };\n      this.req._asyncValidationErrors.push(promise);\n    } else if (!isValid) {\n      this.validationErrors.push(error);\n      this.req._validationErrors.push(error);\n      this.lastError = { param: this.param, value: this.value, isAsync: false };\n    } else {\n      this.lastError = null;\n    }\n\n    return this;\n  };\n}\n\n/**\n * Sanitizes and sets sanitized value on the request, then return instance of itself to allow for chaining\n *\n * @method makeSanitizer\n * @param  {string}          methodName\n * @param  {object}          container\n * @return {function}\n */\n\nfunction makeSanitizer(methodName, container) {\n  return function() {\n    var _arguments = arguments;\n    var result;\n    this.values.forEach(function(value, i) {\n      if (value != null) {\n        var args = [value];\n        args = args.concat(Array.prototype.slice.call(_arguments));\n        result = container[methodName].apply(container, args);\n\n        _.set(this.req[this.locations[i]], this.param, result);\n        this.values[i] = result;\n      }\n    }.bind(this));\n\n    return result;\n  };\n}\n\n/**\n * find location of param\n *\n * @method param\n * @param  {Request} req       express request object\n * @param  {(string|string[])} name [description]\n * @return {string}\n */\n\nfunction locate(req, name) {\n  if (_.get(req.params, name)) {\n    return 'params';\n  } else if (_.has(req.query, name)) {\n    return 'query';\n  } else if (_.has(req.body, name)) {\n    return 'body';\n  }\n\n  return undefined;\n}\n\n/**\n * format param output if passed in as array (for nested)\n * before calling errorFormatter\n *\n * @method param\n * @param  {(string|string[])} param       parameter as a string or array\n * @param  {string} msg\n * @param  {string} value\n * @return {function}\n */\nfunction formatErrors(param, msg, value) {\n  var formattedParam = utils.formatParamOutput(param);\n\n  return this.errorFormatter(formattedParam, msg, value);\n}\n\nmodule.exports = expressValidator;\nmodule.exports.validator = validator;\nmodule.exports.utils = utils;\n","/home/travis/build/npmtest/node-npmtest-express-validator/node_modules/express-validator/lib/utils.js":"var validator = require('validator');\r\n\r\nmodule.exports = exports = {};\r\n\r\n// Convert nested params as array into string for output\r\n// Ex: ['users', '0', 'fields', 'email'] to 'users[0].fields.email'\r\nexports.formatParamOutput = function formatParamOutput(param) {\r\n  if (Array.isArray(param)) {\r\n    param = param.reduce(function(prev, curr) {\r\n      var part = '';\r\n      if (validator.isInt(curr)) {\r\n        part = '[' + curr + ']';\r\n      } else {\r\n        if (prev) {\r\n          part = '.' + curr;\r\n        } else {\r\n          part = curr;\r\n        }\r\n      }\r\n\r\n      return prev + part;\r\n    });\r\n  }\r\n\r\n  return param;\r\n};\r\n\r\nexports.decorateAsValidationResult = function decorateAsValidationResult(obj, errors) {\r\n  var onlyFirstError = false;\r\n\r\n  obj.isEmpty = function isEmpty() {\r\n    return !errors.length;\r\n  };\r\n\r\n  obj.array = function allErrors() {\r\n    var used = {};\r\n    return !onlyFirstError ? errors : errors.filter(function(error) {\r\n      if (used[error.param]) {\r\n        return false;\r\n      }\r\n\r\n      used[error.param] = true;\r\n      return true;\r\n    });\r\n  };\r\n\r\n  obj.mapped = function mappedErrors() {\r\n    return errors.reduce(function(mapping, error) {\r\n      if (!onlyFirstError || !mapping[error.param]) {\r\n        mapping[error.param] = error;\r\n      }\r\n\r\n      return mapping;\r\n    }, {});\r\n  };\r\n\r\n  obj.useFirstErrorOnly = function useFirstErrorOnly(flag) {\r\n    onlyFirstError = flag === undefined || flag;\r\n    return obj;\r\n  };\r\n\r\n  obj.throw = function throwError() {\r\n    if (errors.length) {\r\n      throw decorateAsValidationResult(new Error('Validation failed'), errors);\r\n    }\r\n  };\r\n\r\n  return obj;\r\n};"}